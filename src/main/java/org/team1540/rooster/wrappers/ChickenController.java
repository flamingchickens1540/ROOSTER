package org.team1540.rooster.wrappers;

import com.ctre.phoenix.ErrorCode;
import com.ctre.phoenix.ParamEnum;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.IMotorController;
import com.ctre.phoenix.motorcontrol.LimitSwitchNormal;
import com.ctre.phoenix.motorcontrol.LimitSwitchSource;
import com.ctre.phoenix.motorcontrol.RemoteFeedbackDevice;
import com.ctre.phoenix.motorcontrol.RemoteLimitSwitchSource;
import com.ctre.phoenix.motorcontrol.RemoteSensorSource;
import com.ctre.phoenix.motorcontrol.SensorTerm;
import com.ctre.phoenix.motorcontrol.StatusFrame;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;

public interface ChickenController extends IMotorController {

  ErrorCode clearMotionProfileHasUnderrun();

  ErrorCode clearStickyFaults();

  /**
   * Sets the allowable closed-loop error in the given parameter slot.
   *
   * @param slotIdx Parameter slot for the constant.
   * @param allowableClosedLoopError Value of the allowable closed-loop error.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configAllowableClosedloopError(int slotIdx, int allowableClosedLoopError);

  /**
   * Configures the closed-loop ramp rate of throttle output.
   *
   * @param secondsFromNeutralToFull Minimum desired time to go from neutral to full throttle. A
   * value of '0' will disable the ramp.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configClosedloopRamp(double secondsFromNeutralToFull);

  ErrorCode configForwardLimitSwitchSource(LimitSwitchSource type,
      LimitSwitchNormal normalOpenOrClose);

  /**
   * Configures the forward limit switch for a remote source.
   *
   * @param type Remote limit switch source. @see #LimitSwitchSource
   * @param normalOpenOrClose Setting for normally open or normally closed.
   * @param deviceID Device ID of remote source.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configForwardLimitSwitchSource(RemoteLimitSwitchSource type,
      LimitSwitchNormal normalOpenOrClose, int deviceID);

  /**
   * Configures the forward soft limit enable.
   *
   * @param enable Forward Sensor Position Limit Enable.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configForwardSoftLimitEnable(boolean enable);

  /**
   * Configures the forward soft limit threhold.
   *
   * @param forwardSensorLimit Forward Sensor Position Limit (in Raw Sensor Units).
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configForwardSoftLimitThreshold(int forwardSensorLimit);

  /**
   * Gets the value of a custom parameter.
   *
   * @param paramIndex Index of custom parameter.
   * @return Value of the custom param.
   */
  int configGetCustomParam(int paramIndex);

  /**
   * Gets a parameter.
   *
   * @param param Parameter enumeration.
   * @param ordinal Ordinal of parameter.
   * @return Value of parameter.
   */
  double configGetParameter(ParamEnum param, int ordinal);

  /**
   * Gets a parameter.
   *
   * @param param Parameter enumeration.
   * @param ordinal Ordinal of parameter.
   * @return Value of parameter.
   */
  double configGetParameter(int param, int ordinal);

  /**
   * Sets the maximum integral accumulator in the given parameter slot.
   *
   * @param slotIdx Parameter slot for the constant.
   * @param iaccum Value of the maximum integral accumulator.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configMaxIntegralAccumulator(int slotIdx, double iaccum);

  /**
   * Sets the Motion Magic Acceleration.
   *
   * @param sensorUnitsPer100msPerSec Motion Magic Acceleration (in Raw Sensor Units per 100 ms
   * per
   * second).
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configMotionAcceleration(int sensorUnitsPer100msPerSec);

  /**
   * Sets the Motion Magic Cruise Velocity.
   *
   * @param sensorUnitsPer100ms Motion Magic Cruise Velocity (in Raw Sensor Units per 100 ms).
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configMotionCruiseVelocity(int sensorUnitsPer100ms);

  /**
   * Configures the output deadband percentage.
   *
   * @param percentDeadband Desired deadband percentage. Minimum is 0.1%, Maximum is 25%.
   * Pass 0.04 for 4%.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configNeutralDeadband(double percentDeadband);

  /**
   * Configures the forward nominal output percentage.
   *
   * @param percentOut Nominal (minimum) percent output.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configNominalOutputForward(double percentOut);

  /**
   * Configures the reverse nominal output percentage.
   *
   * @param percentOut Nominal (minimum) percent output.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configNominalOutputReverse(double percentOut);

  /**
   * Configures the open-loop ramp rate of throttle output.
   *
   * @param secondsFromNeutralToFull Minimum desired time to go from neutral to full throttle. A
   * value of '0' will disable the ramp.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configOpenloopRamp(double secondsFromNeutralToFull);

  /**
   * Configures the forward peak output percentage.
   *
   * @param percentOut Desired peak output percentage.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configPeakOutputForward(double percentOut);

  /**
   * Configures the reverse peak output percentage.
   *
   * @param percentOut Desired peak output percentage.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configPeakOutputReverse(double percentOut);

  /**
   * Gets the forward peak output percentage.
   *
   * @return Double from -1 to 1 inclusive.
   */
  double getPeakOutputForward();

  /**
   * Gets the reverse peak output percentage.
   *
   * @return Double from -1 to 1 inclusive.
   */
  double getPeakOutputReverse();

  ErrorCode configRemoteFeedbackFilter(int deviceID, RemoteSensorSource remoteSensorSource,
      int remoteOrdinal);

  /**
   * Configures the reverse limit switch for a remote source.
   *
   * @param type Remote limit switch source. @see #LimitSwitchSource
   * @param normalOpenOrClose Setting for normally open or normally closed.
   * @param deviceID Device ID of remote source.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configReverseLimitSwitchSource(RemoteLimitSwitchSource type,
      LimitSwitchNormal normalOpenOrClose, int deviceID);

  /**
   * Configures the reverse soft limit enable.
   *
   * @param enable Reverse Sensor Position Limit Enable.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configReverseSoftLimitEnable(boolean enable);

  /**
   * Configures the reverse soft limit threshold.
   *
   * @param reverseSensorLimit Reverse Sensor Position Limit (in Raw Sensor Units).
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configReverseSoftLimitThreshold(int reverseSensorLimit);

  /**
   * Select the remote feedback device for the motor controller.
   *
   * @param feedbackDevice Remote Feedback Device to select.
   * @param pidIdx 0 for Primary closed-loop. 1 for cascaded closed-loop.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configSelectedFeedbackSensor(RemoteFeedbackDevice feedbackDevice, int pidIdx);

  /**
   * Select the remote feedback device for the motor controller.
   *
   * @param feedbackDevice Remote Feedback Device to select.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configSelectedFeedbackSensor(RemoteFeedbackDevice feedbackDevice);

  /**
   * Select the feedback device for the motor controller.
   *
   * @param feedbackDevice Feedback Device to select.
   * @param pidIdx The PID IDX to use.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configSelectedFeedbackSensor(FeedbackDevice feedbackDevice, int pidIdx);

  /**
   * Select the feedback device for the motor controller.
   *
   * @param feedbackDevice Feedback Device to select.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configSelectedFeedbackSensor(FeedbackDevice feedbackDevice);

  ErrorCode configSensorTerm(SensorTerm sensorTerm, FeedbackDevice feedbackDevice);

  /**
   * Sets the value of a custom parameter.
   *
   * @param newValue Value for custom parameter.
   * @param paramIndex Index of custom parameter.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configSetCustomParam(int newValue, int paramIndex);

  /**
   * Sets a parameter.
   *
   * @param param Parameter enumeration.
   * @param value Value of parameter.
   * @param subValue Subvalue for parameter. Maximum value of 255.
   * @param ordinal Ordinal of parameter.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configSetParameter(ParamEnum param, double value, int subValue, int ordinal);

  /**
   * Sets a parameter.
   *
   * @param param Parameter enumeration.
   * @param value Value of parameter.
   * @param subValue Subvalue for parameter. Maximum value of 255.
   * @param ordinal Ordinal of parameter.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configSetParameter(int param, double value, int subValue, int ordinal);

  /**
   * Sets the period over which velocity measurements are taken.
   *
   * @param period Desired period for the velocity measurement. @see
   * #VelocityMeasPeriod
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configVelocityMeasurementPeriod(int period);

  ErrorCode configVelocityMeasurementWindow(int windowSize);

  /**
   * Configures the Voltage Compensation saturation voltage.
   *
   * @param voltage TO-DO: Comment me!
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configVoltageCompSaturation(double voltage);

  /**
   * Configures the voltage measurement filter.
   *
   * @param filterWindowSamples Number of samples in the rolling average of voltage
   * measurement.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode configVoltageMeasurementFilter(int filterWindowSamples);

  /**
   * Sets the Integral Zone constant in the given parameter slot.
   *
   * @param slotIdx Parameter slot for the constant.
   * @param izone Value of the Integral Zone constant.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode config_IntegralZone(int slotIdx, int izone);

  /**
   * Sets the 'D' constant in the given parameter slot.
   *
   * @param slotIdx Parameter slot for the constant.
   * @param value Value of the D constant.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode config_kD(int slotIdx, double value);

  /**
   * Sets the 'F' constant in the given parameter slot.
   *
   * @param slotIdx Parameter slot for the constant.
   * @param value Value of the F constant.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode config_kF(int slotIdx, double value);

  /**
   * Sets the 'I' constant in the given parameter slot.
   *
   * @param slotIdx Parameter slot for the constant.
   * @param value Value of the I constant.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode config_kI(int slotIdx, double value);

  /**
   * Sets the 'P' constant in the given parameter slot.
   *
   * @param slotIdx Parameter slot for the constant.
   * @param value Value of the P constant.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode config_kP(int slotIdx, double value);

  /**
   * Get the position of whatever is in the analog pin of the Talon,
   * regardless of whether it is actually being used for feedback.
   *
   * @return the 24bit analog value. The bottom ten bits is the ADC (0 - 1023)
   * on the analog pin of the Talon. The upper 14 bits tracks the
   * overflows and underflows (continuous sensor).
   */
  int getAnalogIn();

  /**
   * Get the position of whatever is in the analog pin of the Talon,
   * regardless of whether it is actually being used for feedback.
   *
   * @return the ADC (0 - 1023) on analog pin of the Talon.
   */
  int getAnalogInRaw();

  /**
   * Get the position of whatever is in the analog pin of the Talon,
   * regardless of whether it is actually being used for feedback.
   *
   * @return the value (0 - 1023) on the analog pin of the Talon.
   */
  int getAnalogInVel();

  /**
   * Gets the closed-loop error.
   *
   * @return Closed-loop error value.
   */
  int getClosedLoopError();

  /**
   * Note that this does <i>not</i> return the currently set control mode in the talon wrapper and
   * may be different than the control mode set using {@link #setControlMode(ControlMode)}.
   *
   * @return The current control mode in the motor controller.
   */
  ControlMode getControlMode();

  void setControlMode(ControlMode controlMode);

  int getDefaultPidIdx();

  void setDefaultPidIdx(int defaultPidIdx);

  int getDefaultTimeoutMs();

  void setDefaultTimeoutMs(int defaultTimeoutMs);

  /**
   * Gets the encoder codes per revolution.
   *
   * @return {@code 0}.
   * @deprecated This no longer has any effect as natural units functionality has been removed.
   */
  @Deprecated
  double getEncoderCodesPerRev();

  /**
   * Sets the encoder codes per revolution for getting and setting velocity and position.
   *
   * @param encoderCodesPerRev The encoder codes per revolution to set.
   * @deprecated This no longer has any effect as natural units functionality has been removed.
   */
  @Deprecated
  void setEncoderCodesPerRev(double encoderCodesPerRev);

  /**
   * Gets the derivative of the closed-loop error.
   *
   * @return The error derivative value.
   */
  double getErrorDerivative();

  /**
   * Gets the iaccum value.
   *
   * @return Integral accumulator value.
   */
  double getIntegralAccumulator();

  /**
   * Gets pin state quad a.
   *
   * @return the pin state quad a.
   */
  boolean getPinStateQuadA();

  /**
   * Gets pin state quad b.
   *
   * @return Digital level of QUADB pin.
   */
  boolean getPinStateQuadB();

  /**
   * Gets pin state quad index.
   *
   * @return Digital level of QUAD Index pin.
   */
  boolean getPinStateQuadIdx();

  /**
   * Gets pulse width position.
   *
   * @return the pulse width position.
   */
  int getPulseWidthPosition();

  /**
   * Gets pulse width rise to fall us.
   *
   * @return the pulse width rise to fall us.
   */
  int getPulseWidthRiseToFallUs();

  /**
   * Gets pulse width rise to rise us.
   *
   * @return the pulse width rise to rise us.
   */
  int getPulseWidthRiseToRiseUs();

  /**
   * Gets pulse width velocity.
   *
   * @return the pulse width velocity.
   */
  int getPulseWidthVelocity();

  /**
   * Get the position of whatever is in the analog pin of the Talon,
   * regardless of whether it is actually being used for feedback.
   *
   * @return the Error code of the request.
   */
  int getQuadraturePosition();

  /**
   * Get the position of whatever is in the analog pin of the Talon,
   * regardless of whether it is actually being used for feedback.
   *
   * @return the value (0 - 1023) on the analog pin of the Talon.
   */
  int getQuadratureVelocity();

  /**
   * Get the selected sensor position.
   *
   * @return Position of selected sensor in raw sensor units per decisecond.
   */
  int getSelectedSensorPosition();

  /**
   * Get the selected sensor velocity.
   *
   * @return Velocity of selected sensor in raw sensor units per decisecond.
   */
  int getSelectedSensorVelocity();

  int getStatusFramePeriod(StatusFrameEnhanced frame);

  /**
   * Gets the period of the given status frame.
   *
   * @param frame Frame to get the period of.
   * @return Period of the given status frame.
   */
  int getStatusFramePeriod(int frame);

  /**
   * Gets the period of the given status frame.
   *
   * @param frame Frame to get the period of.
   * @return Period of the given status frame.
   */
  int getStatusFramePeriod(StatusFrame frame);

  /**
   * Is forward limit switch closed.
   *
   * @return '1' iff forward limit switch is closed, 0 iff switch is open.
   * This function works regardless if limit switch feature is
   * enabled.
   */
  boolean isFwdLimitSwitchClosed();

  /**
   * Is reverse limit switch closed.
   *
   * @return '1' iff reverse limit switch is closed, 0 iff switch is open.
   * This function works regardless if limit switch feature is
   * enabled.
   */
  boolean isRevLimitSwitchClosed();

  /**
   * Selects which profile slot to use for closed-loop control.
   *
   * @param slotIdx Profile slot to select.
   **/
  void selectProfileSlot(int slotIdx);

  /**
   * Sets the appropriate output on the talon, depending on the mode.
   * <p>
   * In PercentOutput, the output is between -1.0 and 1.0, with 0.0 as
   * stopped. In Voltage mode, output value is in volts. In Current mode,
   * output value is in amperes. In Speed mode, output value is in position
   * change / 100ms. In Position mode, output value is in  native sensor units.
   * In Velocity mode, output value is in native units per decisecond. In Follower mode,
   * the output value is the integer device ID of the talon to duplicate.
   *
   * @param outputValue The setpoint value, as described above.
   */
  void set(double outputValue);

  /**
   * Sets analog position.
   *
   * @param newPosition The new position.
   * @return an ErrorCode.
   */
  ErrorCode setAnalogPosition(int newPosition);

  /**
   * Sets the mode of operation during neutral throttle output.
   *
   * @param brake Whether or not to brake.
   **/
  void setBrake(boolean brake);

  /**
   * Sets the integral accumulator.
   *
   * @param iaccum Value to set for the integral accumulator.
   * @param pidIdx The PID IDX to use.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode setIntegralAccumulator(double iaccum, int pidIdx);

  /**
   * Sets the integral accumulator.
   *
   * @param iaccum Value to set for the integral accumulator.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode setIntegralAccumulator(double iaccum);

  /**
   * Sets pulse width position.
   *
   * @param newPosition The position value to apply to the sensor.
   * @return an ErrErrorCode
   */
  ErrorCode setPulseWidthPosition(int newPosition);

  /**
   * Change the quadrature reported position. Typically this is used to "zero"
   * the sensor. This only works with Quadrature sensor. To set the selected
   * sensor position regardless of what type it is, see
   * SetSelectedSensorPosition in the motor controller class.
   *
   * @param newPosition The position value to apply to the sensor.
   * @return error code.
   */
  ErrorCode setQuadraturePosition(int newPosition);

  /**
   * Sets the sensor position to the given value.
   *
   * @param sensorPos Position to set for the selected sensor (in Raw Sensor Units).
   * @param pidIdx The PID IDX to use.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode setSelectedSensorPosition(int sensorPos, int pidIdx);

  /**
   * Sets the sensor position to the given value.
   *
   * @param sensorPos Position to set for the selected sensor (in Raw Sensor Units).
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode setSelectedSensorPosition(int sensorPos);

  /**
   * Sets the period of the given status frame.
   *
   * @param periodMs Period in ms for the given frame.
   * @param frameValue Frame whose period is to be changed.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode setStatusFramePeriod(int frameValue, int periodMs);

  /**
   * Sets the period of the given status frame.
   *
   * @param frame Frame whose period is to be changed.
   * @param periodMs Period in ms for the given frame.
   * @return Error Code generated by function. 0 indicates no error.
   */
  ErrorCode setStatusFramePeriod(StatusFrame frame, int periodMs);
}
